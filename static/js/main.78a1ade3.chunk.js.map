{"version":3,"sources":["logo.svg","Store/types.ts","Components/NavigationBar.tsx","Components/Welcome.tsx","Store/actions.ts","Store/cookieHelpers.ts","Store/thunks.ts","Components/ErrorMessage.tsx","Components/TableMenu.tsx","Components/UsersTable.tsx","Components/Users.tsx","Components/Login.tsx","Components/Logout.tsx","Store/reducers.ts","Store/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SortType","LoginStatus","UsersFetchStatus","API","NavigationBar","loginStatus","useSelector","state","login","Navbar","bg","variant","expand","to","exact","Brand","href","src","logo","width","height","className","alt","Toggle","aria-controls","Collapse","id","Nav","Link","LOGIN_SUCCESSFUL","Welcome","Jumbotron","Container","Button","setLoginStatus","status","errorMsg","type","loginErrorMsg","setUsers","usersArray","message","users","fetchStatus","fetchErrorMsg","changeUserTableSortType","sort","sortType","setCookie","name","value","options","path","expires","Date","toUTCString","updatedCookie","encodeURIComponent","optionKey","optionValue","document","cookie","getCookie","matches","match","RegExp","replace","decodeURIComponent","undefined","thunkLogout","dispatch","a","NOT_LOGGED_IN","thunkFetchUsers","NOT_FETCHED","token","FETCHING_IN_PROGRESS","api","fetch","headers","then","response","ok","FETCHING_HAS_ERRORED","statusText","Error","json","FETCHED_SUCCESSFUL","catch","error","ErrorMessage","props","Card","Body","msg","TableMenu","useDispatch","usernameFilterWord","userTable","useState","filterWord","setFilterWord","useEffect","Header","Form","Row","Col","sm","md","xs","Label","Control","placeholder","onChange","event","target","disabled","Spinner","as","animation","size","role","aria-hidden","onClick","UsersTable","selectSortType","Table","css","styles","wordWrap","responsive","bordered","hover","noWrap","ASCENDING","DESCENDING","toggleSortType","String","fromCharCode","showArrow","user1","user2","u1","u2","filter","user","u","regexp","test","username","map","style","first_name","last_name","password","is_active","last_login","is_superuser","StyleSheet","create","wordBreak","whiteSpace","Users","Login","setLogin","setPassword","rememberMe","setRememberMe","onSubmit","preventDefault","log","pass","remember","LOGIN_IN_PROGRESS","body","method","JSON","stringify","now","e","WRONG_CREDENTIAL","LOGIN_HAS_ERRORED","thunkLogin","Group","controlId","isInvalid","Feedback","Check","checked","label","Logout","loginInitialState","usersInitialState","userTableInitialState","reducers","combineReducers","action","middleware","store","next","result","localStorage","getState","console","group","info","groupEnd","thunk","initialState","createStore","parse","composeWithDevTools","applyMiddleware","storeCreator","App","basename","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78a1ade3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d6715342.svg\";","import {RootState} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {Action} from 'redux'\r\nimport User from \"./Model/User\";\r\n\r\nexport const LOGIN_ACTION = 'LOGIN_ACTION'\r\nexport const SET_USERS_ACTION = 'SET_USERS_ACTION'\r\nexport const API = 'https://emphasoft-test-assignment.herokuapp.com'\r\nexport const USER_TABLE_FILTER_ACTION = \"USER_TABLE_FILTER_ACTION\"\r\nexport const USER_TABLE_SORT_TYPE_ACTION = \"USER_TABLE_SORT_TYPE_ACTION\"\r\nexport const REMEMBER_ME_ACTION = \"REMEMBER_ME_ACTION\"\r\n\r\nexport enum SortType {\r\n    ASCENDING = \"ASCENDING\",\r\n    DESCENDING = \"DESCENDING\"\r\n}\r\n\r\nexport enum LoginStatus {\r\n    NOT_LOGGED_IN = \"NOT_LOGGED_IN\",\r\n    LOGIN_IN_PROGRESS = \"LOGIN_IN_PROGRESS\",\r\n    LOGIN_HAS_ERRORED = \"LOGIN_HAS_ERRORED\",\r\n    LOGIN_SUCCESSFUL = \"LOGIN_SUCCESSFUL\",\r\n    WRONG_CREDENTIAL = \"WRONG_CREDENTIALS\"\r\n}\r\n\r\nexport enum UsersFetchStatus {\r\n    NOT_FETCHED = \"NOT_FETCHED\",\r\n    FETCHING_IN_PROGRESS = \"FETCHING_IN_PROGRESS\",\r\n    FETCHING_HAS_ERRORED = \"FETCHING_HAS_ERRORED\",\r\n    FETCHED_SUCCESSFUL = \"FETCHED_SUCCESSFUL\"\r\n}\r\n\r\nexport interface LoginState {\r\n    loginStatus: LoginStatus,\r\n    loginErrorMsg: string,\r\n    remember: boolean\r\n}\r\n\r\nexport interface LoginAction {\r\n    type: typeof LOGIN_ACTION,\r\n    loginStatus: LoginStatus,\r\n    loginErrorMsg: string\r\n}\r\n\r\nexport interface UsersState {\r\n    users: User[],\r\n    fetchStatus: UsersFetchStatus,\r\n    fetchErrorMsg: string\r\n}\r\n\r\nexport interface UsersAction extends UsersState {\r\n    type: typeof SET_USERS_ACTION\r\n}\r\n\r\nexport interface UserTableSettingsState {\r\n    usernameFilterWord: string,\r\n    sortType: SortType\r\n}\r\n\r\nexport interface UserTableFilterAction {\r\n    type: typeof USER_TABLE_FILTER_ACTION,\r\n    usernameFilterWord: string\r\n}\r\n\r\nexport interface UserTableSortTypeAction {\r\n    type: typeof USER_TABLE_SORT_TYPE_ACTION,\r\n    sortType: SortType\r\n}\r\n\r\nexport interface RememberMeAction {\r\n    type: typeof REMEMBER_ME_ACTION,\r\n    remember: boolean\r\n}\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>>\r\n","import {Nav, Navbar} from \"react-bootstrap\";\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../Store/store\";\r\nimport {LoginStatus} from \"../Store/types\";\r\nimport logo from \"../logo.svg\";\r\n\r\nexport default function NavigationBar() {\r\n\r\n    const selectLoginStatus = (state: RootState) => state.login.loginStatus\r\n    const loginStatus: any = useSelector(selectLoginStatus)\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\r\n            <LinkContainer to=\"/\" exact={true}>\r\n                <Navbar.Brand href=\"/\">\r\n                    <img\r\n                        src={logo}\r\n                        width=\"150\"\r\n                        height=\"30\"\r\n                        className=\"d-inline-block align-top\"\r\n                        alt=\"React Bootstrap logo\"\r\n                    />\r\n                </Navbar.Brand>\r\n            </LinkContainer>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <LinkContainer to=\"/users\">\r\n                        <Nav.Link href=\"#link\">Users List</Nav.Link>\r\n                    </LinkContainer>\r\n\r\n\r\n                </Nav>\r\n\r\n                <Nav className=\"justify-content-end\">\r\n                    {loginStatus === LoginStatus.LOGIN_SUCCESSFUL ?\r\n                        (\r\n                            <LinkContainer to=\"/logout\">\r\n                                <Nav.Link href=\"#login\">Logout</Nav.Link>\r\n                            </LinkContainer>\r\n                        ) :\r\n                        (\r\n                            <LinkContainer to=\"/login\">\r\n                                <Nav.Link href=\"#login\">Login</Nav.Link>\r\n                            </LinkContainer>\r\n                        )}\r\n\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Button, Container, Jumbotron} from \"react-bootstrap\";\r\nimport {LinkContainer} from \"react-router-bootstrap\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../Store/store\";\r\nimport {LoginStatus} from \"../Store/types\";\r\n\r\n\r\nexport default function Welcome() {\r\n    const loginStatus: any = useSelector((state: RootState) => state.login.loginStatus)\r\n\r\n    return (\r\n        <Jumbotron className=\"min-vh-100 m-auto align-items-center\">\r\n            <Container className=\"text-center\">\r\n                <h1 className=\"display-3\">Welcome To My SPA</h1>\r\n                <h2 className=\"lead\">You can log in and see the list of users from the emphasoft backend</h2>\r\n                {loginStatus !== LoginStatus.LOGIN_SUCCESSFUL ?\r\n                    <LinkContainer to=\"/login\"><Button>Login</Button></LinkContainer>\r\n                    : \"\"}\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n\r\n}\r\n","import {\r\n    LOGIN_ACTION,\r\n    LoginAction,\r\n    LoginStatus,\r\n    REMEMBER_ME_ACTION,\r\n    SET_USERS_ACTION,\r\n    SortType,\r\n    USER_TABLE_FILTER_ACTION,\r\n    USER_TABLE_SORT_TYPE_ACTION,\r\n    UsersAction,\r\n    UsersFetchStatus,\r\n    UserTableFilterAction,\r\n    UserTableSortTypeAction\r\n} from \"./types\";\r\nimport User from \"./Model/User\";\r\n\r\nexport function setLoginStatus(status: LoginStatus, errorMsg = \"\"): LoginAction {\r\n    return {\r\n        type: LOGIN_ACTION,\r\n        loginStatus: status,\r\n        loginErrorMsg: errorMsg\r\n    }\r\n}\r\n\r\nexport function setUsers(usersArray: User[], status: UsersFetchStatus, message = \"\"): UsersAction {\r\n    return {\r\n        type: SET_USERS_ACTION,\r\n        users: usersArray,\r\n        fetchStatus: status,\r\n        fetchErrorMsg: message\r\n    }\r\n}\r\n\r\nexport function changeUserTableFilter(filter: string): UserTableFilterAction {\r\n    return {\r\n        type: USER_TABLE_FILTER_ACTION,\r\n        usernameFilterWord: filter\r\n    }\r\n}\r\n\r\nexport function changeUserTableSortType(sort: SortType): UserTableSortTypeAction {\r\n    return {\r\n        type: USER_TABLE_SORT_TYPE_ACTION,\r\n        sortType: sort\r\n    }\r\n}\r\n\r\nexport function setRememberMe(rem: boolean) {\r\n    return {\r\n        type: REMEMBER_ME_ACTION,\r\n        remember: rem\r\n    }\r\n}\r\n\r\n\r\n","export function setCookie(name: string, value: string, options: any) {\r\n\r\n    options = {\r\n        path: '/',\r\n        // при необходимости добавьте другие значения по умолчанию\r\n        ...options\r\n    };\r\n\r\n    if (options.expires instanceof Date) {\r\n        options.expires = options.expires.toUTCString();\r\n    }\r\n\r\n    let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n\r\n    for (let optionKey in options) {\r\n        updatedCookie += \"; \" + optionKey;\r\n        let optionValue = options[optionKey];\r\n        if (optionValue !== true) {\r\n            updatedCookie += \"=\" + optionValue;\r\n        }\r\n    }\r\n\r\n    document.cookie = updatedCookie;\r\n}\r\n\r\nexport function getCookie(name: string) {\r\n    let matches = document.cookie.match(new RegExp(\r\n        \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n\r\nexport function deleteCookie(name: string) {\r\n    setCookie(name, \"\", {\r\n        'max-age': -1\r\n    })\r\n}\r\n\r\nexport function checkToken(): boolean {\r\n    return !!getCookie(\"token\")\r\n}\r\n","import {checkToken, deleteCookie, getCookie, setCookie} from \"./cookieHelpers\";\r\nimport {setLoginStatus, setUsers} from \"./actions\";\r\nimport {API, AppThunk, LoginStatus, UsersFetchStatus} from \"./types\";\r\n\r\nexport const thunkLogin = (log: string, pass: string, remember: boolean = false): AppThunk => async dispatch => {\r\n    await thunkLogout();\r\n    dispatch(setLoginStatus(LoginStatus.LOGIN_IN_PROGRESS));\r\n    const body = {username: log, password: pass};\r\n\r\n    const api = API + \"/api-token-auth/\";\r\n    return fetch(api, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json', 'accept': 'application/json'},\r\n        body: JSON.stringify(body),\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                if (response.status === 400) {\r\n                    throw new Error(\"400\")\r\n                } else {\r\n                    throw new Error(response.statusText)\r\n                }\r\n            }\r\n            return response;\r\n        })\r\n        .then((response) => response.json())\r\n        .then((token) => {\r\n            if (token?.token) {\r\n                if (remember) {\r\n                    setCookie(\"token\", token.token, {'max-age': Date.now() + 2_592_000}) // 30 дней\r\n                } else {\r\n                    setCookie(\"token\", token.token, {})\r\n                }\r\n                dispatch(setLoginStatus(LoginStatus.LOGIN_SUCCESSFUL))\r\n            }else {\r\n                throw Error(\"Doesnt have token\")\r\n            }\r\n            return token\r\n        })\r\n        .catch((e: Error) => {\r\n            if(e.message === \"400\"){\r\n                return dispatch(setLoginStatus(LoginStatus.WRONG_CREDENTIAL,\"Wrong Credentials\"));\r\n            }\r\n            return dispatch(setLoginStatus(LoginStatus.LOGIN_HAS_ERRORED, e.message))\r\n        })\r\n}\r\n\r\nexport const thunkLogout = (): AppThunk => async dispatch => {\r\n    dispatch(setLoginStatus(LoginStatus.NOT_LOGGED_IN))\r\n    deleteCookie(\"token\")\r\n}\r\n\r\nexport const thunkFetchUsers = (): AppThunk => async dispatch => {\r\n\r\n    dispatch(setUsers([], UsersFetchStatus.NOT_FETCHED))\r\n\r\n    if (!checkToken() && process.env.NODE_ENV !== \"test\") {\r\n        return dispatch(thunkLogout())\r\n    }\r\n    const token = getCookie(\"token\");\r\n    dispatch(setUsers([], UsersFetchStatus.FETCHING_IN_PROGRESS))\r\n\r\n    const api = `${API}/api/v1/users/`;\r\n    return await fetch(api, {\r\n        headers: {'Authorization': `Token ${token}`}\r\n    }).then((response) => {\r\n        if (!response.ok) {\r\n            dispatch(setUsers([], UsersFetchStatus.FETCHING_HAS_ERRORED, response.statusText))\r\n            throw new Error(response.statusText);\r\n        }\r\n        return response;\r\n    })\r\n        .then((response) => response.json())\r\n        .then((users) => {\r\n            return dispatch(setUsers(users, UsersFetchStatus.FETCHED_SUCCESSFUL))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setUsers([], UsersFetchStatus.FETCHING_HAS_ERRORED, error.message))\r\n        })\r\n}\r\n","import {Card} from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\nexport default function ErrorMessage(props: { msg: string }) {\r\n\r\n    return (\r\n        <Card bg=\"danger\" className=\"text-center p-0\">\r\n            <Card.Body>\r\n                {props.msg}\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Card, Col, Form, Spinner} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeUserTableFilter} from \"../Store/actions\";\r\nimport {thunkFetchUsers} from \"../Store/thunks\";\r\nimport {UsersFetchStatus} from \"../Store/types\";\r\nimport {RootState} from \"../Store/store\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\n\r\nexport function TableMenu() {\r\n\r\n    const dispatch = useDispatch()\r\n    const fetchStatus: UsersFetchStatus = useSelector((state: RootState) => state.users.fetchStatus)\r\n    const usernameFilterWord: any = useSelector((state: RootState) => state.userTable.usernameFilterWord)\r\n    const [filterWord, setFilterWord] = useState(\"\")\r\n\r\n    useEffect(() => {setFilterWord(usernameFilterWord)})\r\n\r\n    return (\r\n        <div>\r\n            {fetchStatus === UsersFetchStatus.FETCHING_HAS_ERRORED\r\n                ? (<ErrorMessage msg={\"Fetch Error\"}/>) : \"\"}\r\n            <Card bg=\"light\">\r\n                <Card.Header>Menu</Card.Header>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Row className=\"align-items-end\">\r\n                            <Col sm=\"9\"  md=\"3\" xs=\"12\">\r\n                                <Form.Label>Filter:</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"username\" value={filterWord}\r\n                                              onChange={event => {\r\n                                                  setFilterWord(event.target.value)\r\n                                                  return dispatch(changeUserTableFilter(event.target.value))\r\n                                              }}>\r\n                                </Form.Control>\r\n                            </Col>\r\n                            <Col sm=\"3\" md=\"auto\" className=\"pt-2 pt-md-0\" xs=\"12\">\r\n                                {fetchStatus === UsersFetchStatus.FETCHING_IN_PROGRESS\r\n                                    ? (<Button variant=\"primary\" disabled>\r\n                                        <Spinner\r\n                                            as=\"span\"\r\n                                            animation=\"border\"\r\n                                            size=\"sm\"\r\n                                            role=\"status\"\r\n                                            aria-hidden=\"true\"\r\n                                        />\r\n                                    </Button>)\r\n                                    : (<Button onClick={() => dispatch(thunkFetchUsers())}>Refresh</Button>)\r\n                                }\r\n                            </Col>\r\n                        </Form.Row>\r\n\r\n\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        </div>)\r\n}\r\n","import User from \"../Store/Model/User\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport {RootState} from \"../Store/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {SortType} from \"../Store/types\";\r\nimport {css, StyleSheet} from 'aphrodite';\r\nimport {changeUserTableSortType} from \"../Store/actions\";\r\n\r\nexport default function UsersTable() {\r\n    const usersArray: any = useSelector((state: RootState) => state.users.users)\r\n    const selectSortType: any = useSelector((state: RootState) => state.userTable.sortType)\r\n    const usernameFilterWord: any = useSelector((state: RootState) => state.userTable.usernameFilterWord)\r\n    const dispatch = useDispatch();\r\n\r\n    function sortUsers(user1: User, user2: User) {\r\n        const sort = (u1: User, u2: User) => {\r\n            if (u1.id > u2.id) {\r\n                return 1\r\n            }\r\n            if (u1.id < u2.id) {\r\n                return -1\r\n            }\r\n            return 0\r\n        }\r\n\r\n        switch (selectSortType) {\r\n            case SortType.ASCENDING:\r\n                return sort(user1, user2)\r\n            case SortType.DESCENDING:\r\n                return sort(user1, user2) * -1\r\n        }\r\n    }\r\n\r\n    function filterUsers(user: User) {\r\n        const regexp = new RegExp(`.*${usernameFilterWord}.*`)\r\n        const filter = (u: User) => regexp.test(u.username)\r\n\r\n        return filter(user);\r\n    }\r\n\r\n    function toggleSortType() {\r\n        switch (selectSortType) {\r\n            case SortType.ASCENDING:\r\n                dispatch(changeUserTableSortType(SortType.DESCENDING));\r\n                break;\r\n            case SortType.DESCENDING:\r\n                dispatch(changeUserTableSortType(SortType.ASCENDING))\r\n                break;\r\n        }\r\n    }\r\n\r\n    function showArrow() {\r\n        switch (selectSortType) {\r\n            case SortType.ASCENDING:\r\n                return String.fromCharCode(9650) // ▲ - char\r\n            case SortType.DESCENDING:\r\n                return String.fromCharCode(9660) // ▼ - char\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Table variant=\"dark\" className={css(styles.wordWrap)} responsive bordered hover size=\"sm\">\r\n            <thead className={css(styles.noWrap)}>\r\n            <tr>\r\n                <th onClick={() => toggleSortType()}>\r\n                    id {showArrow()}\r\n                </th>\r\n                <th>Username</th>\r\n                <th>First Name</th>\r\n                <th>Last Name</th>\r\n                <th>Password</th>\r\n                <th>Is Active</th>\r\n                <th>Last Login</th>\r\n                <th>Is Superuser</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {usersArray.sort(sortUsers).filter(filterUsers).map((user: User) => {\r\n                return (\r\n                    <tr>\r\n                        <td style={{'minWidth': '40px'}}>{user.id}</td>\r\n                        <td style={{'minWidth': '120px'}}>{user.username}</td>\r\n                        <td style={{'minWidth': '120px'}}>{user.first_name}</td>\r\n                        <td style={{'minWidth': '150px'}}>{user.last_name}</td>\r\n                        <td style={{'minWidth': '50px'}}>{user.password}</td>\r\n                        <td style={{'minWidth': '74px'}}>{user.is_active ? \"true\" : \"false\"}</td>\r\n                        <td style={{'minWidth': '100px'}}>{user.last_login}</td>\r\n                        <td style={{'minWidth': '74px'}}>{user.is_superuser ? \"true\" : \"false\"}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    wordWrap: {\r\n        wordBreak: 'break-all'\r\n    },\r\n    noWrap: {\r\n        whiteSpace: 'nowrap'\r\n    }\r\n})\r\n","import React from \"react\";\r\nimport { Jumbotron} from \"react-bootstrap\";\r\nimport {TableMenu} from \"./TableMenu\";\r\nimport UsersTable from \"./UsersTable\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../Store/store\";\r\nimport {LoginStatus} from \"../Store/types\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {thunkFetchUsers} from \"../Store/thunks\";\r\n\r\nexport default function Users() {\r\n    const loginStatus: LoginStatus = useSelector((state: RootState) => state.login.loginStatus)\r\n\r\n    const dispatch = useDispatch();\r\n    dispatch(thunkFetchUsers())\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron className=\"min-vh-100 m-auto align-items-center\">\r\n                    {loginStatus === LoginStatus.LOGIN_SUCCESSFUL ?\r\n                        (<div>\r\n                            <TableMenu/>\r\n                            <UsersTable/>\r\n                        </div>) :\r\n                        (<Redirect to=\"/login\"/>)}\r\n            </Jumbotron>\r\n        </div>)\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, Col, Container, Form, Jumbotron, Row} from \"react-bootstrap\";\r\nimport {Redirect} from 'react-router'\r\nimport {RootState} from \"../Store/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginStatus} from \"../Store/types\";\r\nimport {thunkLogin} from \"../Store/thunks\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\n\r\nexport default function Login() {\r\n    const [login, setLogin] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false)\r\n\r\n    const loginStatus: LoginStatus = useSelector((state: RootState) => state.login.loginStatus)\r\n    const dispatch = useDispatch()\r\n\r\n    function submit(event: ChangeEvent<any>) {\r\n        event.preventDefault()\r\n        dispatch(thunkLogin(login, password, rememberMe))\r\n    }\r\n\r\n    return (\r\n        <Jumbotron className=\"min-vh-100 m-auto align-items-center\">\r\n            <Container>\r\n                <Row>\r\n                    <Col className=\"col-md-3 col-xl-4\"/>\r\n                    <Col md>\r\n                        {loginStatus === LoginStatus.LOGIN_SUCCESSFUL ?\r\n                            (<Redirect to=\"/users\"/>)\r\n                            : (\r\n                                <Form onSubmit={submit}>\r\n                                    {loginStatus === LoginStatus.LOGIN_HAS_ERRORED ? (<ErrorMessage msg=\"No internet\"/>) : (\"\")}\r\n                                <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Login</Form.Label>\r\n                                    {loginStatus !== LoginStatus.WRONG_CREDENTIAL ?\r\n                                        (\r\n                                            <Form.Control type=\"text\" placeholder=\"Enter login\"\r\n                                                          onChange={(event) => setLogin(event.target.value)}/>)\r\n                                        : (\r\n                                            <Form.Control isInvalid type=\"text\" placeholder=\"Enter login\"\r\n                                                          onChange={(event) => setLogin(event.target.value)}/>\r\n                                        )}\r\n                                    <Form.Control.Feedback type=\"invalid\">Wrong login or\r\n                                        password</Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicPassword\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    {loginStatus !== LoginStatus.WRONG_CREDENTIAL ?\r\n                                        (\r\n                                            <Form.Control type=\"password\" placeholder=\"Password\"\r\n                                                          onChange={(event) => setPassword(event.target.value)}/>)\r\n                                        : (\r\n                                            <Form.Control isInvalid type=\"password\" placeholder=\"Password\"\r\n                                                          onChange={(event) => setPassword(event.target.value)}/>\r\n                                        )}\r\n                                    <Form.Control.Feedback type=\"invalid\">Wrong login or\r\n                                        password</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"formBasicCheckbox\">\r\n                                    <Form.Check\r\n                                        onChange={(event: ChangeEvent<any>) => setRememberMe(event.target.checked)}\r\n                                        type=\"checkbox\"\r\n                                        label=\"Check me out\"/>\r\n                                </Form.Group>\r\n                                <Button variant=\"primary\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Form>\r\n                            )\r\n                        }\r\n                    </Col>\r\n                    <Col className=\"col-md-3 col-xl-4\"/>\r\n                </Row>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import {Redirect} from 'react-router'\r\nimport React, {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {thunkLogout} from \"../Store/thunks\";\r\n\r\nexport function Logout() {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(thunkLogout())\r\n    })\r\n    return (\r\n        <Redirect exact to=\"/\"/>\r\n    )\r\n}\r\n","import {\r\n    LOGIN_ACTION,\r\n    LoginAction,\r\n    LoginState,\r\n    LoginStatus,\r\n    REMEMBER_ME_ACTION,\r\n    RememberMeAction,\r\n    SortType,\r\n    UsersAction,\r\n    UsersFetchStatus,\r\n    UsersState,\r\n    UserTableFilterAction,\r\n    UserTableSettingsState,\r\n    UserTableSortTypeAction\r\n} from \"./types\";\r\n\r\nexport const loginInitialState: LoginState = {\r\n    loginStatus: LoginStatus.NOT_LOGGED_IN,\r\n    loginErrorMsg: \"\",\r\n    remember: false\r\n}\r\n\r\nexport const usersInitialState: UsersState = {\r\n    users: [],\r\n    fetchStatus: UsersFetchStatus.NOT_FETCHED,\r\n    fetchErrorMsg: \"\"\r\n}\r\n\r\nexport const userTableInitialState: UserTableSettingsState = {\r\n    sortType: SortType.ASCENDING,\r\n    usernameFilterWord: \"\"\r\n}\r\n\r\nexport function loginReducer(state = loginInitialState, action: LoginAction | RememberMeAction): LoginState {\r\n    switch (action.type) {\r\n        case LOGIN_ACTION:\r\n            return {\r\n                ...state,\r\n                loginStatus: action.loginStatus,\r\n                loginErrorMsg: action.loginErrorMsg\r\n            }\r\n        case REMEMBER_ME_ACTION:\r\n            return {\r\n                ...state,\r\n                remember: action.remember\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function usersReducer(state = usersInitialState, action: UsersAction): UsersState {\r\n    switch (action.type) {\r\n        case \"SET_USERS_ACTION\":\r\n            return {\r\n                ...state,\r\n                users: action.users,\r\n                fetchStatus: action.fetchStatus\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function userTableSettingsReducer(state = userTableInitialState, action: UserTableFilterAction | UserTableSortTypeAction): UserTableSettingsState {\r\n    switch (action.type) {\r\n        case \"USER_TABLE_FILTER_ACTION\":\r\n            return {\r\n                ...state,\r\n                usernameFilterWord: action.usernameFilterWord,\r\n            }\r\n        case \"USER_TABLE_SORT_TYPE_ACTION\":\r\n            return {\r\n                ...state,\r\n                sortType: action.sortType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {loginReducer, usersReducer, userTableSettingsReducer} from \"./reducers\";\r\nimport thunk from 'redux-thunk';\r\nimport {LoginState, UsersState, UserTableSettingsState} from \"./types\";\r\n\r\n// tslint:disable:no-console\r\n\r\nexport interface RootState {\r\n    login: LoginState,\r\n    users: UsersState\r\n    userTable: UserTableSettingsState\r\n}\r\n\r\nconst saver = (store: { getState: () => any; }) =>\r\n    (next: (arg0: any) => any) =>\r\n        (action: any) => {\r\n            const result = next(action);\r\n            localStorage['redux-store'] = JSON.stringify(store.getState());\r\n            return result;\r\n        };\r\n\r\nconst logger = (store: { getState: () => any; }) =>\r\n    (next: (arg0: any) => any) =>\r\n        (action: { type: any; }) => {\r\n            console.group(action.type);\r\n            console.info('dispatching', action);\r\n            const result = next(action);\r\n            console.log('next state', store.getState());\r\n            console.groupEnd();\r\n            return result;\r\n        };\r\n\r\nconst reducers = combineReducers({\r\n    login: loginReducer,\r\n    users: usersReducer,\r\n    userTable: userTableSettingsReducer\r\n});\r\n\r\nconst middleware = [saver, logger, thunk];\r\n\r\nexport default function configureStore(initialState = {}) {\r\n    return createStore(\r\n        reducers,\r\n        (localStorage['redux-store']) ?\r\n            JSON.parse(localStorage['redux-store']) :\r\n            initialState,\r\n        composeWithDevTools(applyMiddleware(...middleware),),\r\n    );\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport NavigationBar from \"./Components/NavigationBar\";\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Welcome from \"./Components/Welcome\";\r\nimport Users from \"./Components/Users\";\r\nimport Login from \"./Components/Login\";\r\nimport {Logout} from \"./Components/Logout\";\r\nimport storeCreator from \"./Store/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nconst store = storeCreator();\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n\r\n            <Router basename=\"/Empha-TestTask\">\r\n                <NavigationBar/>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Welcome/>\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <Login/>\r\n                    </Route>\r\n                    <Route exact path=\"/users\">\r\n                        <Users/>\r\n                    </Route>\r\n                    <Route exact path=\"/logout\">\r\n                        <Logout/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}