{"version":3,"sources":["Store/types.ts","Components/NavigationBar.tsx","Components/Welcome.tsx","Store/actions.ts","Store/cookieHelpers.ts","Store/thunks.ts","Components/TableMenu.tsx","Components/UsersTable.tsx","Components/Users.tsx","Components/Login.tsx","Components/Logout.tsx","Store/reducers.ts","Store/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SortType","LoginStatus","UsersFetchStatus","API","NavigationBar","loginStatus","useSelector","state","login","Navbar","bg","expand","to","exact","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","LOGIN_SUCCESSFUL","Welcome","Jumbotron","Container","setLoginStatus","status","errorMsg","type","loginErrorMsg","setUsers","usersArray","message","users","fetchStatus","fetchErrorMsg","changeUserTableFilter","filter","usernameFilterWord","changeUserTableSortType","sort","sortType","setCookie","name","value","options","path","expires","Date","toUTCString","updatedCookie","encodeURIComponent","optionKey","optionValue","document","cookie","getCookie","matches","match","RegExp","replace","decodeURIComponent","undefined","thunkLogout","dispatch","a","NOT_LOGGED_IN","TableMenu","useDispatch","ASCENDING","Form","Group","inline","Label","Control","placeholder","onChange","event","target","as","custom","DESCENDING","dispatchSortType","selected","FETCHING_IN_PROGRESS","Button","variant","disabled","Spinner","animation","size","role","aria-hidden","onClick","NOT_FETCHED","token","api","fetch","headers","then","response","ok","FETCHING_HAS_ERRORED","statusText","Error","json","FETCHED_SUCCESSFUL","catch","error","UsersTable","userTable","Table","responsive","striped","bordered","hover","user1","user2","u1","u2","user","u","regexp","test","username","map","first_name","last_name","password","is_active","last_login","is_superuser","Users","Login","useState","setLogin","setPassword","rememberMe","setRememberMe","Row","Col","md","onSubmit","preventDefault","log","pass","remember","LOGIN_IN_PROGRESS","body","method","JSON","stringify","LOGIN_HAS_ERRORED","now","thunkLogin","controlId","Check","checked","label","Logout","useEffect","loginInitialState","usersInitialState","userTableInitialState","reducers","combineReducers","action","middleware","store","next","result","localStorage","getState","console","group","info","groupEnd","thunk","initialState","createStore","parse","composeWithDevTools","applyMiddleware","storeCreator","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.232534bb.chunk.js","sourcesContent":["import {RootState} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {Action} from 'redux'\r\nimport User from \"./Model/User\";\r\n\r\nexport const LOGIN_ACTION = 'LOGIN_ACTION'\r\nexport const SET_USERS_ACTION = 'SET_USERS_ACTION'\r\nexport const API = 'https://emphasoft-test-assignment.herokuapp.com'\r\nexport const USER_TABLE_FILTER_ACTION = \"USER_TABLE_FILTER_ACTION\"\r\nexport const USER_TABLE_SORT_TYPE_ACTION = \"USER_TABLE_SORT_TYPE_ACTION\"\r\nexport const REMEMBER_ME_ACTION = \"REMEMBER_ME_ACTION\"\r\n\r\nexport enum SortType {\r\n    ASCENDING = \"ASCENDING\",\r\n    DESCENDING = \"DESCENDING\"\r\n}\r\n\r\nexport enum LoginStatus {\r\n    NOT_LOGGED_IN = \"NOT_LOGGED_IN\",\r\n    LOGIN_IN_PROGRESS = \"LOGIN_IN_PROGRESS\",\r\n    LOGIN_HAS_ERRORED = \"LOGIN_HAS_ERRORED\",\r\n    LOGIN_SUCCESSFUL = \"LOGIN_SUCCESSFUL\",\r\n}\r\n\r\nexport enum UsersFetchStatus {\r\n    NOT_FETCHED = \"NOT_FETCHED\",\r\n    FETCHING_IN_PROGRESS = \"FETCHING_IN_PROGRESS\",\r\n    FETCHING_HAS_ERRORED = \"FETCHING_HAS_ERRORED\",\r\n    FETCHED_SUCCESSFUL = \"FETCHED_SUCCESSFUL\"\r\n}\r\n\r\nexport interface LoginState {\r\n    loginStatus: LoginStatus,\r\n    loginErrorMsg: string,\r\n    remember: boolean\r\n}\r\n\r\nexport interface LoginAction {\r\n    type: typeof LOGIN_ACTION,\r\n    loginStatus: LoginStatus,\r\n    loginErrorMsg: string\r\n}\r\n\r\nexport interface UsersState {\r\n    users: User[],\r\n    fetchStatus: UsersFetchStatus,\r\n    fetchErrorMsg: string\r\n}\r\n\r\nexport interface UsersAction extends UsersState {\r\n    type: typeof SET_USERS_ACTION\r\n}\r\n\r\nexport interface UserTableSettingsState {\r\n    usernameFilterWord: string,\r\n    sortType: SortType\r\n}\r\n\r\nexport interface UserTableFilterAction {\r\n    type: typeof USER_TABLE_FILTER_ACTION,\r\n    usernameFilterWord: string\r\n}\r\n\r\nexport interface UserTableSortTypeAction {\r\n    type: typeof USER_TABLE_SORT_TYPE_ACTION,\r\n    sortType: SortType\r\n}\r\n\r\nexport interface RememberMeAction {\r\n    type: typeof REMEMBER_ME_ACTION,\r\n    remember: boolean\r\n}\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>>\r\n","import {Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../Store/store\";\r\nimport {LoginStatus} from \"../Store/types\";\r\n\r\nexport default function NavigationBar() {\r\n\r\n    const selectLoginStatus = (state: RootState) => state.login.loginStatus\r\n    const loginStatus: any = useSelector(selectLoginStatus)\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"md\">\r\n            <LinkContainer to=\"/\" exact={true}>\r\n                <Navbar.Brand href=\"/\">Emphasoft</Navbar.Brand>\r\n            </LinkContainer>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <LinkContainer to=\"/users\">\r\n                        <Nav.Link href=\"#link\">Users List</Nav.Link>\r\n                    </LinkContainer>\r\n\r\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                        <NavDropdown.Divider/>\r\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n\r\n                <Nav className=\"justify-content-end\">\r\n                    {loginStatus === LoginStatus.LOGIN_SUCCESSFUL ?\r\n                        (\r\n                            <LinkContainer to=\"/logout\">\r\n                                <Nav.Link href=\"#login\">Logout</Nav.Link>\r\n                            </LinkContainer>\r\n                        ) :\r\n                        (\r\n                            <LinkContainer to=\"/login\">\r\n                                <Nav.Link href=\"#login\">Login</Nav.Link>\r\n                            </LinkContainer>\r\n                        )}\r\n\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Container, Jumbotron} from \"react-bootstrap\";\r\n\r\n\r\nexport default function Welcome() {\r\n    return (\r\n        <Jumbotron className=\"min-vh-100 m-auto align-items-center\">\r\n            <Container className=\"text-center\">\r\n                <h1 className=\"display-3\">Welcome To My Page</h1>\r\n                <h2 className=\"lead\">You can log in and see the list of users from the emphasoft server</h2>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n\r\n}\r\n","import {\r\n    LOGIN_ACTION,\r\n    LoginAction,\r\n    LoginStatus,\r\n    REMEMBER_ME_ACTION,\r\n    SET_USERS_ACTION,\r\n    SortType,\r\n    USER_TABLE_FILTER_ACTION,\r\n    USER_TABLE_SORT_TYPE_ACTION,\r\n    UsersAction,\r\n    UsersFetchStatus,\r\n    UserTableFilterAction,\r\n    UserTableSortTypeAction\r\n} from \"./types\";\r\nimport User from \"./Model/User\";\r\n\r\nexport function setLoginStatus(status: LoginStatus, errorMsg = \"\"): LoginAction {\r\n    return {\r\n        type: LOGIN_ACTION,\r\n        loginStatus: status,\r\n        loginErrorMsg: errorMsg\r\n    }\r\n}\r\n\r\nexport function setUsers(usersArray: User[], status: UsersFetchStatus, message = \"\"): UsersAction {\r\n    return {\r\n        type: SET_USERS_ACTION,\r\n        users: usersArray,\r\n        fetchStatus: status,\r\n        fetchErrorMsg: message\r\n    }\r\n}\r\n\r\nexport function changeUserTableFilter(filter: string): UserTableFilterAction {\r\n    return {\r\n        type: USER_TABLE_FILTER_ACTION,\r\n        usernameFilterWord: filter\r\n    }\r\n}\r\n\r\nexport function changeUserTableSortType(sort: SortType): UserTableSortTypeAction {\r\n    return {\r\n        type: USER_TABLE_SORT_TYPE_ACTION,\r\n        sortType: sort\r\n    }\r\n}\r\n\r\nexport function setRememberMe(rem: boolean) {\r\n    return {\r\n        type: REMEMBER_ME_ACTION,\r\n        remember: rem\r\n    }\r\n}\r\n\r\n\r\n","export function setCookie(name: string, value: string, options: any) {\r\n\r\n    options = {\r\n        path: '/',\r\n        // при необходимости добавьте другие значения по умолчанию\r\n        ...options\r\n    };\r\n\r\n    if (options.expires instanceof Date) {\r\n        options.expires = options.expires.toUTCString();\r\n    }\r\n\r\n    let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n\r\n    for (let optionKey in options) {\r\n        updatedCookie += \"; \" + optionKey;\r\n        let optionValue = options[optionKey];\r\n        if (optionValue !== true) {\r\n            updatedCookie += \"=\" + optionValue;\r\n        }\r\n    }\r\n\r\n    document.cookie = updatedCookie;\r\n}\r\n\r\nexport function getCookie(name: string) {\r\n    let matches = document.cookie.match(new RegExp(\r\n        \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n\r\nexport function deleteCookie(name: string) {\r\n    setCookie(name, \"\", {\r\n        'max-age': -1\r\n    })\r\n}\r\n\r\nexport function checkToken(): boolean {\r\n    return !!getCookie(\"token\")\r\n}\r\n","import {checkToken, deleteCookie, getCookie, setCookie} from \"./cookieHelpers\";\r\nimport {setLoginStatus, setUsers} from \"./actions\";\r\nimport {API, AppThunk, LoginStatus, UsersFetchStatus} from \"./types\";\r\n\r\nexport const thunkLogin = (log: string, pass: string, remember: boolean = false): AppThunk => async dispatch => {\r\n    await thunkLogout();\r\n    dispatch(setLoginStatus(LoginStatus.LOGIN_IN_PROGRESS));\r\n    const body = {username: log, password: pass};\r\n\r\n    const api = API + \"/api-token-auth/\";\r\n    return fetch(api, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json', 'accept': 'application/json'},\r\n        body: JSON.stringify(body),\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                dispatch(setLoginStatus(LoginStatus.LOGIN_HAS_ERRORED, response.statusText))\r\n                throw new Error(response.statusText);\r\n            }\r\n            return response;\r\n        })\r\n        .then((response) => response.json())\r\n        .then((token) => {\r\n            if (remember) {\r\n                setCookie(\"token\", token.token, {'max-age': Date.now() + 2_592_000}) // 30 дней\r\n            } else {\r\n                setCookie(\"token\", token.token, {})\r\n            }\r\n            dispatch(setLoginStatus(LoginStatus.LOGIN_SUCCESSFUL))\r\n            return token\r\n        })\r\n        .catch((response) => {\r\n            return dispatch(setLoginStatus(LoginStatus.LOGIN_HAS_ERRORED, response.statusText))\r\n        })\r\n}\r\n\r\nexport const thunkLogout = (): AppThunk => async dispatch => {\r\n    dispatch(setLoginStatus(LoginStatus.NOT_LOGGED_IN))\r\n    deleteCookie(\"token\")\r\n}\r\n\r\nexport const thunkFetchUsers = (): AppThunk => async dispatch => {\r\n\r\n    dispatch(setUsers([], UsersFetchStatus.NOT_FETCHED))\r\n\r\n    if (!checkToken() && process.env.NODE_ENV !== \"test\") {\r\n        return dispatch(thunkLogout())\r\n    }\r\n    const token = getCookie(\"token\");\r\n    dispatch(setUsers([], UsersFetchStatus.FETCHING_IN_PROGRESS))\r\n\r\n    const api = `${API}/api/v1/users/`;\r\n    return await fetch(api, {\r\n        headers: {'Authorization': `Token ${token}`}\r\n    }).then((response) => {\r\n        if (!response.ok) {\r\n            dispatch(setUsers([], UsersFetchStatus.FETCHING_HAS_ERRORED, response.statusText))\r\n            throw new Error(response.statusText);\r\n        }\r\n        return response;\r\n    })\r\n        .then((response) => response.json())\r\n        .then((users) => {\r\n            return dispatch(setUsers(users, UsersFetchStatus.FETCHED_SUCCESSFUL))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setUsers([], UsersFetchStatus.FETCHING_HAS_ERRORED, error.message))\r\n        })\r\n}\r\n","import React from \"react\";\r\nimport {Button, Form, Spinner} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeUserTableFilter, changeUserTableSortType} from \"../Store/actions\";\r\nimport {thunkFetchUsers} from \"../Store/thunks\";\r\nimport {SortType, UsersFetchStatus} from \"../Store/types\";\r\nimport {RootState} from \"../Store/store\";\r\n\r\nexport function TableMenu() {\r\n\r\n    const dispatch = useDispatch()\r\n    const fetchStatus: UsersFetchStatus = useSelector((state: RootState) => state.users.fetchStatus)\r\n    dispatch(changeUserTableSortType(SortType.ASCENDING))\r\n    dispatch(changeUserTableFilter(\"\"))\r\n\r\n    function dispatchSortType(sortType: string) {\r\n        {\r\n            switch (sortType) {\r\n                case \"ASC\":\r\n                    return dispatch(changeUserTableSortType(SortType.ASCENDING))\r\n                case \"DESC\":\r\n                    return dispatch(changeUserTableSortType(SortType.DESCENDING))\r\n                default:\r\n                    return dispatch(changeUserTableSortType(SortType.ASCENDING))\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form.Group>\r\n                <Form inline>\r\n                    <Form.Label>Filter:</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"username\"\r\n                                  onChange={event => dispatch(changeUserTableFilter(event.target.value))}>\r\n                    </Form.Control>\r\n                    <Form.Label>Sort:</Form.Label>\r\n                    <Form.Control as=\"select\" className=\"mr-sm-2\" custom\r\n                                  onChange={event => dispatchSortType(event.target.value)}>\r\n                        <option selected value=\"ASC\">Ascending</option>\r\n                        <option value=\"DESC\">Descending</option>\r\n                    </Form.Control>\r\n                    {fetchStatus === UsersFetchStatus.FETCHING_IN_PROGRESS\r\n                        ? (<Button variant=\"primary\" disabled>\r\n                            <Spinner\r\n                                as=\"span\"\r\n                                animation=\"grow\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                            />\r\n                            Loading...\r\n                        </Button>)\r\n                        : (<Button onClick={() => dispatch(thunkFetchUsers())}>Refresh</Button>)\r\n                    }\r\n                </Form>\r\n            </Form.Group>\r\n        </div>)\r\n}\r\n","import User from \"../Store/Model/User\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport {RootState} from \"../Store/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {SortType} from \"../Store/types\";\r\n\r\nexport default function UsersTable() {\r\n    useDispatch();\r\n    const usersArray: any = useSelector((state: RootState) => state.users.users)\r\n    const sortType: any = useSelector((state: RootState) => state.userTable.sortType)\r\n    const usernameFilterWord: any = useSelector((state: RootState) => state.userTable.usernameFilterWord)\r\n\r\n\r\n    function sortUsers(user1: User, user2: User) {\r\n        const sort = (u1: User, u2: User) => {\r\n            if (u1.id > u2.id) {\r\n                return 1\r\n            }\r\n            if (u1.id < u2.id) {\r\n                return -1\r\n            }\r\n            return 0\r\n        }\r\n\r\n        switch (sortType) {\r\n            case SortType.ASCENDING:\r\n                return sort(user1, user2)\r\n            case SortType.DESCENDING:\r\n                return sort(user1, user2) * -1\r\n        }\r\n    }\r\n\r\n    function filterUsers(user: User) {\r\n        const regexp = new RegExp(`.*${usernameFilterWord}.*`)\r\n        const filter = (u: User) => regexp.test(u.username)\r\n\r\n        return filter(user);\r\n    }\r\n\r\n    return (\r\n        <Table variant=\"dark\" responsive className=\"text-break\" striped bordered hover size=\"sm\">\r\n            <thead>\r\n            <tr>\r\n                <th>id</th>\r\n                <th>Username</th>\r\n                <th>First Name</th>\r\n                <th>Last Name</th>\r\n                <th>Password</th>\r\n                <th>Is Active</th>\r\n                <th>Last Login</th>\r\n                <th>Is Superuser</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {usersArray.sort(sortUsers).filter(filterUsers).map((user: User) => {\r\n                return (\r\n                    <tr>\r\n                        <td>{user.id}</td>\r\n                        <td>{user.username}</td>\r\n                        <td>{user.first_name}</td>\r\n                        <td>{user.last_name}</td>\r\n                        <td>{user.password}</td>\r\n                        <td>{user.is_active ? \"true\" : \"false\"}</td>\r\n                        <td>{user.last_login}</td>\r\n                        <td>{user.is_superuser ? \"true\" : \"false\"}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Jumbotron} from \"react-bootstrap\";\r\nimport {TableMenu} from \"./TableMenu\";\r\nimport UsersTable from \"./UsersTable\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../Store/store\";\r\nimport {LoginStatus} from \"../Store/types\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport default function Users() {\r\n    const loginStatus: LoginStatus = useSelector((state: RootState) => state.login.loginStatus)\r\n\r\n    // dispatch(thunkFetchUsers())\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron className=\" min-vh-100 align-items-center\">\r\n                {loginStatus === LoginStatus.LOGIN_SUCCESSFUL ?\r\n                    (<div>\r\n                        <TableMenu/>\r\n                        <UsersTable/>\r\n                    </div>) :\r\n                    (<Redirect to=\"/login\"/>)}\r\n            </Jumbotron>\r\n        </div>)\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, Col, Container, Form, Jumbotron, Row} from \"react-bootstrap\";\r\nimport {Redirect} from 'react-router'\r\nimport {RootState} from \"../Store/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginStatus} from \"../Store/types\";\r\nimport {thunkLogin} from \"../Store/thunks\";\r\n\r\nexport default function Login() {\r\n    const [login, setLogin] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false)\r\n\r\n    const selectLoginStatus = (state: RootState) => state.login.loginStatus\r\n    const loginStatus: any = useSelector(selectLoginStatus)\r\n    const dispatch = useDispatch()\r\n\r\n    function submit(event: ChangeEvent<any>) {\r\n        event.preventDefault()\r\n        dispatch(thunkLogin(login, password, rememberMe))\r\n    }\r\n\r\n    return (\r\n        <Jumbotron className=\"min-vh-100 m-auto align-items-center\">\r\n            <Container>\r\n                <Row>\r\n                    <Col className=\"col-md-3 col-xl-4\"/>\r\n                    <Col md>\r\n                        {loginStatus === LoginStatus.LOGIN_SUCCESSFUL ?\r\n                            (<Redirect to=\"/users\"/>)\r\n                            : (<Form onSubmit={submit}>\r\n                                <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Login</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter login\"\r\n                                                  onChange={(event) => setLogin(event.target.value)}/>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicPassword\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control type=\"password\" placeholder=\"Password\"\r\n                                                  onChange={(event) => setPassword(event.target.value)}/>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"formBasicCheckbox\">\r\n                                    {/* tslint:disable-next-line:no-console */}\r\n                                    <Form.Check onChange={(event: ChangeEvent<any>) => setRememberMe(event.target.checked)} type=\"checkbox\"\r\n                                                label=\"Check me out\"/>\r\n                                </Form.Group>\r\n                                <Button variant=\"primary\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Form>)\r\n                        }\r\n                    </Col>\r\n                    <Col className=\"col-md-3 col-xl-4\"/>\r\n                </Row>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import {Redirect} from 'react-router'\r\nimport React, {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {thunkLogout} from \"../Store/thunks\";\r\n\r\nexport function Logout() {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(thunkLogout())\r\n    })\r\n    return (\r\n        <Redirect exact to=\"/\"/>\r\n    )\r\n}\r\n","import {\r\n    LOGIN_ACTION,\r\n    LoginAction,\r\n    LoginState,\r\n    LoginStatus,\r\n    REMEMBER_ME_ACTION,\r\n    RememberMeAction,\r\n    SortType,\r\n    UsersAction,\r\n    UsersFetchStatus,\r\n    UsersState,\r\n    UserTableFilterAction,\r\n    UserTableSettingsState,\r\n    UserTableSortTypeAction\r\n} from \"./types\";\r\n\r\nconst loginInitialState: LoginState = {\r\n    loginStatus: LoginStatus.NOT_LOGGED_IN,\r\n    loginErrorMsg: \"\",\r\n    remember: false\r\n}\r\n\r\nconst usersInitialState: UsersState = {\r\n    users: [],\r\n    fetchStatus: UsersFetchStatus.NOT_FETCHED,\r\n    fetchErrorMsg: \"\"\r\n}\r\n\r\nconst userTableInitialState: UserTableSettingsState = {\r\n    sortType: SortType.ASCENDING,\r\n    usernameFilterWord: \"\"\r\n}\r\n\r\nexport function loginReducer(state = loginInitialState, action: LoginAction | RememberMeAction): LoginState {\r\n    switch (action.type) {\r\n        case LOGIN_ACTION:\r\n            return {\r\n                ...state,\r\n                loginStatus: action.loginStatus,\r\n                loginErrorMsg: action.loginErrorMsg\r\n            }\r\n        case REMEMBER_ME_ACTION:\r\n            return {\r\n                ...state,\r\n                remember: action.remember\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function usersReducer(state = usersInitialState, action: UsersAction): UsersState {\r\n    switch (action.type) {\r\n        case \"SET_USERS_ACTION\":\r\n            return {\r\n                ...state,\r\n                users: action.users,\r\n                fetchStatus: action.fetchStatus\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function userTableSettingsReducer(state = userTableInitialState, action: UserTableFilterAction | UserTableSortTypeAction): UserTableSettingsState {\r\n    switch (action.type) {\r\n        case \"USER_TABLE_FILTER_ACTION\":\r\n            return {\r\n                ...state,\r\n                usernameFilterWord: action.usernameFilterWord,\r\n            }\r\n        case \"USER_TABLE_SORT_TYPE_ACTION\":\r\n            return {\r\n                ...state,\r\n                sortType: action.sortType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {loginReducer, usersReducer, userTableSettingsReducer} from \"./reducers\";\r\nimport thunk from 'redux-thunk';\r\nimport {LoginState, UsersState, UserTableSettingsState} from \"./types\";\r\n// tslint:disable:no-console\r\n\r\nexport interface RootState {\r\n    login: LoginState,\r\n    users: UsersState\r\n    userTable: UserTableSettingsState\r\n}\r\n\r\nconst saver = (store: { getState: () => any; }) =>\r\n    (next: (arg0: any) => any) =>\r\n        (action: any) => {\r\n            const result = next(action);\r\n            localStorage['redux-store'] = JSON.stringify(store.getState());\r\n            return result;\r\n        };\r\n\r\nconst logger = (store: { getState: () => any; }) =>\r\n    (next: (arg0: any) => any) =>\r\n        (action: { type: any; }) => {\r\n            console.group(action.type);\r\n            console.info('dispatching', action);\r\n            const result = next(action);\r\n            console.log('next state', store.getState());\r\n            console.groupEnd();\r\n            return result;\r\n        };\r\n\r\nconst reducers = combineReducers({\r\n    login: loginReducer,\r\n    users: usersReducer,\r\n    userTable: userTableSettingsReducer\r\n});\r\n\r\nconst middleware = [saver, logger, thunk];\r\n\r\nexport default function configureStore(initialState = {}) {\r\n    return createStore(\r\n        reducers,\r\n        (localStorage['redux-store']) ?\r\n            JSON.parse(localStorage['redux-store']) :\r\n            initialState,\r\n        composeWithDevTools(applyMiddleware(...middleware),),\r\n    );\r\n}\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavigationBar from \"./Components/NavigationBar\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Welcome from \"./Components/Welcome\";\nimport Users from \"./Components/Users\";\nimport Login from \"./Components/Login\";\nimport {Logout} from \"./Components/Logout\";\nimport storeCreator from \"./Store/store\";\nimport {Provider} from \"react-redux\";\n\n\nconst store = storeCreator();\n\nfunction App() {\n    return (\n        <Provider store={store}>\n        <Router>\n            <NavigationBar/>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Welcome/>\n                </Route>\n                <Route exact path=\"/login\">\n                    <Login/>\n                </Route>\n                <Route exact path=\"/users\">\n                    <Users/>\n                </Route>\n                <Route exact path=\"/logout\">\n                    <Logout/>\n                </Route>\n            </Switch>\n        </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport storeCreator from \"./Store/store\";\nimport {Provider} from \"react-redux\";\n\n\n\nReactDOM.render(\n    <React.StrictMode>\n            <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}